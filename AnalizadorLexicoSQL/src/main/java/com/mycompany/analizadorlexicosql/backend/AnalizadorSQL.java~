// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: /home/mynordma/analizador-lexico-sql-jflex/AnalizadorLexicoSQL/src/main/java/com/mycompany/analizadorlexicosql/backend/lexico.flex

/* Archivo: lexico.flex */
package com.mycompany.analizadorlexicosql.backend;
import java.util.ArrayList;


@SuppressWarnings("fallthrough")
public class AnalizadorSQL {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\1\22\0\1\1\6\0"+
    "\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\12\15\1\0\1\16\1\17\1\20\1\21\2\0"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\2\0\1\53\2\0\1\54\1\0\32\54\12\0"+
    "\1\3\u01a2\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\1\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\25\1\1\22\1\0\1\23\2\0"+
    "\1\24\1\0\1\25\1\26\3\0\1\27\3\0\1\30"+
    "\13\0\1\31\10\0\1\32\1\33\15\0\1\34\1\35"+
    "\1\0\1\36\1\37\1\40\24\0\1\41\1\0\1\42"+
    "\1\43\1\44\6\0\1\45\1\46\23\0\1\47\2\0"+
    "\1\50\1\51\3\0\1\52\3\0\1\53\1\54\1\0"+
    "\1\55\6\0\1\56\1\57\1\60\6\0\1\61\5\0"+
    "\1\62\5\0\1\63\1\0\1\64\2\0\1\65\1\66"+
    "\4\0\1\67\4\0\1\70\1\0\1\71\2\0\1\72"+
    "\1\0\1\73\2\0\1\74\1\75\1\0\1\76\3\0"+
    "\1\77\1\100\1\101\1\102\1\103\2\0\1\104\1\105"+
    "\2\0\1\34\1\106\1\107\1\110\1\0\1\111\2\0"+
    "\1\112\5\0\1\113\1\114\1\0\1\115";

  private static int [] zzUnpackAction() {
    int [] result = new int[255];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\55\0\132\0\55\0\55\0\207\0\55\0\55"+
    "\0\55\0\55\0\55\0\264\0\55\0\55\0\341\0\55"+
    "\0\u010e\0\55\0\u013b\0\u0168\0\u0195\0\u01c2\0\u01ef\0\u021c"+
    "\0\u0249\0\u0276\0\u02a3\0\u02d0\0\u02fd\0\u032a\0\u0357\0\u0384"+
    "\0\u03b1\0\u03de\0\u040b\0\u0438\0\u0465\0\u0492\0\u04bf\0\u04ec"+
    "\0\u0519\0\u0546\0\55\0\u0573\0\u05a0\0\u05cd\0\u05fa\0\55"+
    "\0\55\0\u0627\0\u0654\0\u0681\0\u06ae\0\u06db\0\u0708\0\u0735"+
    "\0\55\0\u0762\0\u078f\0\u07bc\0\u07e9\0\u0816\0\u0843\0\u0870"+
    "\0\u089d\0\u08ca\0\u08f7\0\u0924\0\55\0\u0951\0\u097e\0\u09ab"+
    "\0\u09d8\0\u0a05\0\u0a32\0\u0a5f\0\u0a8c\0\55\0\u0ab9\0\u0ae6"+
    "\0\u0b13\0\u0b40\0\u0b6d\0\u0b9a\0\u0bc7\0\u0bf4\0\u0c21\0\u0c4e"+
    "\0\u0c7b\0\u0ca8\0\u0cd5\0\u0d02\0\u05fa\0\55\0\u0d2f\0\55"+
    "\0\55\0\55\0\u0d5c\0\u0d89\0\u0db6\0\u0de3\0\u0e10\0\u0e3d"+
    "\0\u0e6a\0\u0e97\0\u0ec4\0\u0ef1\0\u0f1e\0\u0f4b\0\u0f78\0\u0fa5"+
    "\0\u0fd2\0\u0fff\0\u102c\0\u1059\0\u1086\0\u10b3\0\55\0\u10e0"+
    "\0\55\0\55\0\55\0\u110d\0\u113a\0\u1167\0\u1194\0\u11c1"+
    "\0\u11ee\0\55\0\55\0\u121b\0\u1248\0\u1275\0\u12a2\0\u12cf"+
    "\0\u12fc\0\u1329\0\u1356\0\u1383\0\u13b0\0\u13dd\0\u140a\0\u1437"+
    "\0\u1464\0\u1491\0\u14be\0\u14eb\0\u1518\0\u1545\0\55\0\u1572"+
    "\0\u159f\0\55\0\55\0\u15cc\0\u15f9\0\u1626\0\55\0\u1653"+
    "\0\u1680\0\u16ad\0\55\0\55\0\u16da\0\55\0\u1707\0\u1734"+
    "\0\u1761\0\u178e\0\u17bb\0\u17e8\0\55\0\55\0\55\0\u1815"+
    "\0\u1842\0\u186f\0\u189c\0\u18c9\0\u18f6\0\55\0\u1923\0\u1950"+
    "\0\u197d\0\u19aa\0\u19d7\0\55\0\u1a04\0\u1a31\0\u1a5e\0\u1a8b"+
    "\0\u1ab8\0\55\0\u1ae5\0\55\0\u1b12\0\u1b3f\0\55\0\55"+
    "\0\u1b6c\0\u1b99\0\u1bc6\0\u1bf3\0\55\0\u1c20\0\u1c4d\0\u1c7a"+
    "\0\u1ca7\0\55\0\u1cd4\0\55\0\u1d01\0\u1d2e\0\55\0\u1d5b"+
    "\0\55\0\u1d88\0\u1db5\0\55\0\55\0\u1de2\0\55\0\u1e0f"+
    "\0\u1e3c\0\u1e69\0\55\0\55\0\55\0\55\0\55\0\u1e96"+
    "\0\u1ec3\0\55\0\55\0\u1ef0\0\u1f1d\0\55\0\55\0\55"+
    "\0\55\0\u1f4a\0\55\0\u1f77\0\u1fa4\0\55\0\u1fd1\0\u1ffe"+
    "\0\u202b\0\u2058\0\u2085\0\55\0\55\0\u20b2\0\55";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[255];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\2\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\2\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\3\2\1\51\56\0\1\3\53\0\4\52\1\53"+
    "\10\52\1\54\35\52\1\55\1\52\12\0\1\56\55\0"+
    "\1\57\1\0\1\17\57\0\1\60\54\0\1\61\61\0"+
    "\1\62\7\0\1\63\1\0\1\64\4\0\1\65\2\0"+
    "\1\66\37\0\1\67\5\0\1\70\11\0\1\71\24\0"+
    "\1\72\15\0\1\73\2\0\1\74\33\0\1\75\3\0"+
    "\1\76\14\0\1\77\62\0\1\100\25\0\1\101\15\0"+
    "\1\102\2\0\1\103\54\0\1\104\40\0\1\105\7\0"+
    "\1\106\55\0\1\107\42\0\1\110\60\0\1\111\44\0"+
    "\1\112\7\0\1\113\62\0\1\114\5\0\1\115\45\0"+
    "\1\116\3\0\1\117\54\0\1\120\37\0\1\121\54\0"+
    "\1\122\17\0\1\123\30\0\1\124\3\0\1\125\14\0"+
    "\1\126\6\0\1\127\41\0\1\130\1\0\1\131\35\0"+
    "\1\132\63\0\1\133\40\0\1\51\36\0\1\51\4\52"+
    "\1\53\46\52\1\55\5\52\1\53\10\52\1\134\35\52"+
    "\1\55\1\52\4\0\1\52\46\0\1\52\1\0\2\56"+
    "\1\0\52\56\15\0\1\135\64\0\1\136\74\0\1\137"+
    "\34\0\1\140\53\0\1\141\60\0\1\142\54\0\1\143"+
    "\64\0\1\144\60\0\1\145\45\0\1\146\1\0\1\147"+
    "\6\0\1\150\34\0\1\151\73\0\1\152\33\0\1\153"+
    "\10\0\1\154\6\0\1\155\50\0\1\156\46\0\1\157"+
    "\57\0\1\160\62\0\1\161\51\0\1\162\54\0\1\163"+
    "\60\0\1\164\1\165\41\0\1\166\74\0\1\167\40\0"+
    "\1\170\67\0\1\171\42\0\1\172\62\0\1\173\44\0"+
    "\1\174\44\0\1\175\61\0\1\176\51\0\1\177\62\0"+
    "\1\200\5\0\1\201\1\0\1\202\45\0\1\203\41\0"+
    "\1\204\102\0\1\205\51\0\1\206\47\0\1\207\45\0"+
    "\1\210\47\0\1\211\64\0\1\212\5\0\1\213\37\0"+
    "\1\214\26\0\4\52\1\53\10\52\1\215\35\52\1\55"+
    "\1\52\26\0\1\216\60\0\1\217\57\0\1\220\43\0"+
    "\1\221\76\0\1\222\52\0\1\223\47\0\1\224\37\0"+
    "\1\225\54\0\1\226\3\0\1\227\60\0\1\230\50\0"+
    "\1\231\52\0\1\232\71\0\1\233\57\0\1\234\54\0"+
    "\1\235\36\0\1\236\64\0\1\237\64\0\1\240\34\0"+
    "\1\241\54\0\1\242\11\0\1\243\53\0\1\244\47\0"+
    "\1\245\57\0\1\246\45\0\1\247\64\0\1\250\44\0"+
    "\1\251\54\0\1\252\60\0\1\253\57\0\1\254\64\0"+
    "\1\255\35\0\1\256\54\0\1\257\70\0\1\260\34\0"+
    "\1\261\100\0\1\262\32\0\1\263\73\0\1\264\11\0"+
    "\4\52\1\53\10\52\1\265\35\52\1\55\1\52\43\0"+
    "\1\266\50\0\1\267\43\0\1\270\50\0\1\271\70\0"+
    "\1\272\63\0\1\273\54\0\1\274\54\0\1\275\32\0"+
    "\1\276\67\0\1\277\63\0\1\300\54\0\1\301\35\0"+
    "\1\302\60\0\1\303\63\0\1\304\56\0\1\305\41\0"+
    "\1\306\71\0\1\307\52\0\1\310\33\0\1\311\75\0"+
    "\1\312\35\0\1\313\52\0\1\314\60\0\1\315\74\0"+
    "\1\316\53\0\1\317\35\0\1\320\57\0\1\321\51\0"+
    "\1\322\26\0\4\52\1\53\5\52\1\323\40\52\1\55"+
    "\1\52\45\0\1\324\31\0\1\325\57\0\1\326\66\0"+
    "\1\327\60\0\1\330\37\0\1\331\50\0\1\332\54\0"+
    "\1\333\60\0\1\334\72\0\1\335\40\0\1\336\71\0"+
    "\1\337\35\0\1\340\71\0\1\341\37\0\1\342\73\0"+
    "\1\343\44\0\1\344\45\0\1\345\54\0\1\346\72\0"+
    "\1\347\32\0\1\350\32\0\4\52\1\53\10\52\1\351"+
    "\35\52\1\55\1\52\37\0\1\352\43\0\1\353\50\0"+
    "\1\354\76\0\1\355\45\0\1\356\56\0\1\357\60\0"+
    "\1\360\63\0\1\361\41\0\1\362\60\0\1\363\11\0"+
    "\4\52\1\53\10\52\1\364\35\52\1\55\1\52\32\0"+
    "\1\365\50\0\1\366\52\0\1\367\30\0\4\52\1\53"+
    "\5\52\1\370\40\52\1\55\1\52\37\0\1\371\43\0"+
    "\1\372\26\0\4\52\1\53\10\52\1\373\35\52\1\55"+
    "\1\52\45\0\1\374\53\0\1\375\10\0\4\52\1\53"+
    "\10\52\1\376\35\52\1\55\5\52\1\377\46\52\1\55"+
    "\1\52";

  private static int [] zzUnpacktrans() {
    int [] result = new int[8415];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\2\11\1\1\5\11\1\1\2\11"+
    "\1\1\1\11\1\1\1\11\27\1\1\0\1\11\2\0"+
    "\1\1\1\0\2\11\3\0\1\1\3\0\1\11\13\0"+
    "\1\11\10\0\1\11\1\1\15\0\1\1\1\11\1\0"+
    "\3\11\24\0\1\11\1\0\3\11\6\0\2\11\23\0"+
    "\1\11\2\0\2\11\3\0\1\11\3\0\2\11\1\0"+
    "\1\11\6\0\3\11\6\0\1\11\5\0\1\11\5\0"+
    "\1\11\1\0\1\11\2\0\2\11\4\0\1\11\4\0"+
    "\1\11\1\0\1\11\2\0\1\11\1\0\1\11\2\0"+
    "\2\11\1\0\1\11\3\0\5\11\2\0\2\11\2\0"+
    "\4\11\1\0\1\11\2\0\1\11\5\0\2\11\1\0"+
    "\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[255];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */

    int linea = 1;
    int columna = 1;
    ArrayList<Token> tokens = new ArrayList<>();

    public void agregarToken(Token token) {
        tokens.add(token);
    }

    public Token token(TipoToken tipo) {
        Token t = new Token(yytext(), linea, columna, tipo);
        columna += yytext().length();
        agregarToken(t); // Agregar el token a la lista
        return t; // También puedes retornar el token si es necesario
    }

    public void nuevaLinea() {
        linea++;
        columna = 1;
    }

    public ArrayList<Token> getTokens() {
        return tokens; // Método para obtener la lista de tokens
    }

    public void resetTokens() {
        tokens.clear(); // Método para reiniciar la lista si es necesario
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AnalizadorSQL(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public int yylex() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return token(TipoToken.OTRO);
            }
          // fall through
          case 78: break;
          case 2:
            { /* Ignorar espacios y tabs */ columna += yytext().length();
            }
          // fall through
          case 79: break;
          case 3:
            { nuevaLinea();
            }
          // fall through
          case 80: break;
          case 4:
            { System.out.print(yytext());
            }
          // fall through
          case 81: break;
          case 5:
            { return token(TipoToken.PARENTESIS_ABRE);
            }
          // fall through
          case 82: break;
          case 6:
            { return token(TipoToken.PARENTESIS_CIERRA);
            }
          // fall through
          case 83: break;
          case 7:
            { return token(TipoToken.POR);
            }
          // fall through
          case 84: break;
          case 8:
            { return token(TipoToken.MAS);
            }
          // fall through
          case 85: break;
          case 9:
            { return token(TipoToken.COMA);
            }
          // fall through
          case 86: break;
          case 10:
            { return token(TipoToken.MENOS);
            }
          // fall through
          case 87: break;
          case 11:
            { return token(TipoToken.PUNTO);
            }
          // fall through
          case 88: break;
          case 12:
            { return token(TipoToken.DIVISION);
            }
          // fall through
          case 89: break;
          case 13:
            { return token(TipoToken.ENTERO);
            }
          // fall through
          case 90: break;
          case 14:
            { return token(TipoToken.PUNTO_Y_COMA);
            }
          // fall through
          case 91: break;
          case 15:
            { return token(TipoToken.MENOR);
            }
          // fall through
          case 92: break;
          case 16:
            { return token(TipoToken.IGUAL);
            }
          // fall through
          case 93: break;
          case 17:
            { return token(TipoToken.MAYOR);
            }
          // fall through
          case 94: break;
          case 18:
            { return token(TipoToken.IDENTIFICADOR);
            }
          // fall through
          case 95: break;
          case 19:
            { return token(TipoToken.CADENA);
            }
          // fall through
          case 96: break;
          case 20:
            { /* Comentario de línea */ nuevaLinea();
            }
          // fall through
          case 97: break;
          case 21:
            { return token(TipoToken.MENOR_IGUAL);
            }
          // fall through
          case 98: break;
          case 22:
            { return token(TipoToken.MAYOR_IGUAL);
            }
          // fall through
          case 99: break;
          case 23:
            { return token(TipoToken.AS);
            }
          // fall through
          case 100: break;
          case 24:
            { return token(TipoToken.BY);
            }
          // fall through
          case 101: break;
          case 25:
            { return token(TipoToken.IF);
            }
          // fall through
          case 102: break;
          case 26:
            { return token(TipoToken.ON);
            }
          // fall through
          case 103: break;
          case 27:
            { return token(TipoToken.OR);
            }
          // fall through
          case 104: break;
          case 28:
            { return token(TipoToken.DECIMAL);
            }
          // fall through
          case 105: break;
          case 29:
            { return token(TipoToken.ADD);
            }
          // fall through
          case 106: break;
          case 30:
            { return token(TipoToken.AND);
            }
          // fall through
          case 107: break;
          case 31:
            { return token(TipoToken.ASC);
            }
          // fall through
          case 108: break;
          case 32:
            { return token(TipoToken.AVG);
            }
          // fall through
          case 109: break;
          case 33:
            { return token(TipoToken.KEY);
            }
          // fall through
          case 110: break;
          case 34:
            { return token(TipoToken.MAX);
            }
          // fall through
          case 111: break;
          case 35:
            { return token(TipoToken.MIN);
            }
          // fall through
          case 112: break;
          case 36:
            { return token(TipoToken.NOT);
            }
          // fall through
          case 113: break;
          case 37:
            { return token(TipoToken.SET);
            }
          // fall through
          case 114: break;
          case 38:
            { return token(TipoToken.SUM);
            }
          // fall through
          case 115: break;
          case 39:
            { return token(TipoToken.DATE);
            }
          // fall through
          case 116: break;
          case 40:
            { return token(TipoToken.DESC);
            }
          // fall through
          case 117: break;
          case 41:
            { return token(TipoToken.DROP);
            }
          // fall through
          case 118: break;
          case 42:
            { return token(TipoToken.FROM);
            }
          // fall through
          case 119: break;
          case 43:
            { return token(TipoToken.INTO);
            }
          // fall through
          case 120: break;
          case 44:
            { return token(TipoToken.JOIN);
            }
          // fall through
          case 121: break;
          case 45:
            { return token(TipoToken.NULL);
            }
          // fall through
          case 122: break;
          case 46:
            { return token(TipoToken.TEXT);
            }
          // fall through
          case 123: break;
          case 47:
            { return token(TipoToken.TRUE);
            }
          // fall through
          case 124: break;
          case 48:
            { return token(TipoToken.TYPE);
            }
          // fall through
          case 125: break;
          case 49:
            { return token(TipoToken.ALTER);
            }
          // fall through
          case 126: break;
          case 50:
            { return token(TipoToken.COUNT);
            }
          // fall through
          case 127: break;
          case 51:
            { return token(TipoToken.FALSE);
            }
          // fall through
          case 128: break;
          case 52:
            { return token(TipoToken.GROUP);
            }
          // fall through
          case 129: break;
          case 53:
            { return token(TipoToken.LIMIT);
            }
          // fall through
          case 130: break;
          case 54:
            { return token(TipoToken.ORDER);
            }
          // fall through
          case 131: break;
          case 55:
            { return token(TipoToken.TABLE);
            }
          // fall through
          case 132: break;
          case 56:
            { return token(TipoToken.WHERE);
            }
          // fall through
          case 133: break;
          case 57:
            { return token(TipoToken.BIGINT);
            }
          // fall through
          case 134: break;
          case 58:
            { return token(TipoToken.COLUMN);
            }
          // fall through
          case 135: break;
          case 59:
            { return token(TipoToken.CREATE);
            }
          // fall through
          case 136: break;
          case 60:
            { return token(TipoToken.DELETE);
            }
          // fall through
          case 137: break;
          case 61:
            { return token(TipoToken.EXISTS);
            }
          // fall through
          case 138: break;
          case 62:
            { return token(TipoToken.INSERT);
            }
          // fall through
          case 139: break;
          case 63:
            { return token(TipoToken.SELECT);
            }
          // fall through
          case 140: break;
          case 64:
            { return token(TipoToken.SERIAL);
            }
          // fall through
          case 141: break;
          case 65:
            { return token(TipoToken.UNIQUE);
            }
          // fall through
          case 142: break;
          case 66:
            { return token(TipoToken.UPDATE);
            }
          // fall through
          case 143: break;
          case 67:
            { return token(TipoToken.VALUES);
            }
          // fall through
          case 144: break;
          case 68:
            { return token(TipoToken.BOOLEAN);
            }
          // fall through
          case 145: break;
          case 69:
            { return token(TipoToken.CASCADE);
            }
          // fall through
          case 146: break;
          case 70:
            { return token(TipoToken.FOREIGN);
            }
          // fall through
          case 147: break;
          case 71:
            { return token(TipoToken.INTEGER);
            }
          // fall through
          case 148: break;
          case 72:
            { return token(TipoToken.PRIMARY);
            }
          // fall through
          case 149: break;
          case 73:
            { return token(TipoToken.VARCHAR);
            }
          // fall through
          case 150: break;
          case 74:
            { return token(TipoToken.DATABASE);
            }
          // fall through
          case 151: break;
          case 75:
            { return token(TipoToken.CONSTRAINT);
            }
          // fall through
          case 152: break;
          case 76:
            { return token(TipoToken.REFERENCES);
            }
          // fall through
          case 153: break;
          case 77:
            { return token(TipoToken.FECHA);
            }
          // fall through
          case 154: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java AnalizadorSQL [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        AnalizadorSQL scanner = null;
        java.io.FileInputStream stream = null;
        java.io.Reader reader = null;
        try {
          stream = new java.io.FileInputStream(argv[i]);
          reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new AnalizadorSQL(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
        finally {
          if (reader != null) {
            try {
              reader.close();
            }
            catch (java.io.IOException e) {
              System.out.println("IO error closing file \""+argv[i]+"\"");
              System.out.println(e);
            }
          }
          if (stream != null) {
            try {
              stream.close();
            }
            catch (java.io.IOException e) {
              System.out.println("IO error closing file \""+argv[i]+"\"");
              System.out.println(e);
            }
          }
        }
      }
    }
  }


}
